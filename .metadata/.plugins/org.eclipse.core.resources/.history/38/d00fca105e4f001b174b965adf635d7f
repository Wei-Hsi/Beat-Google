
import java.util.ArrayList;

public class Ranking {

	public ArrayList<WebNode> nodeList = new ArrayList<WebNode>();

	public String[][] array;

	public Ranking(ArrayList<WebNode> nodeList) {
		this.nodeList = QuickSort(nodeList, 0, nodeList.size() - 1);
	}

	public Ranking(String[][] array) {
		this.array = QuickSort(array, 0, array.length - 1);
	}

	public String[][] QuickSort(String[][] array, int leftest, int rightest) {

		if (array.length < 2) {
			return array;
		} else if (leftest < rightest) {
			String[] pivotKey = array[leftest];
			int i = leftest;
			int j = rightest;

			do {
				do {
					i += 1;
				} while (!(Double.parseDouble(array[i][2]) > Double.parseDouble(pivotKey[2])) && i >= rightest);

				do {
					j -= 1;
				} while (!(Double.parseDouble(array[j][2]) < Double.parseDouble(pivotKey[2])) && j >= leftest);

				if (i < j) {
					String[] temp = array[i];
					array[i] = array[j];
					array[j] = temp;
				}
			} while (!(i >= j));
			String[] temp = array[leftest];
			array[leftest] = array[j];
			array[j] = temp;

			QuickSort(array, leftest, j - 1);
			QuickSort(array, j + 1, rightest);
		}
		return array;
	}

	public ArrayList<WebNode> QuickSort(ArrayList<WebNode> nodeList, int leftest, int rightest) {

		if (nodeList.size() < 2) {
			return nodeList;
		} else if (leftest < rightest) {
			WebNode pivotKey = nodeList.get(leftest);
			int i = leftest;
			int j = rightest;

			do {
				do {
					i += 1;
				} while (!(nodeList.get(i).getNodeScore() > pivotKey.getNodeScore()) && i >= rightest);

				do {
					j -= 1;
				} while (!(nodeList.get(j).getNodeScore() < pivotKey.getNodeScore()) && j >= leftest);

				if (i < j) {
					WebNode temp = nodeList.get(i);
					nodeList.set(i, nodeList.get(j));
					nodeList.set(j, temp);
				}
			} while (!(i >= j));
			WebNode temp = nodeList.get(leftest);
			nodeList.set(leftest, nodeList.get(j));
			nodeList.set(j, temp);

			QuickSort(nodeList, leftest, j - 1);
			QuickSort(nodeList, j + 1, rightest);
		}
		return nodeList;
	}

}
